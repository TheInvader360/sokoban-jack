class Controller {
    field Model model;
    field boolean running;

    constructor Controller new(Model aModel) {
        let model = aModel;
        let running = true;
        return this;
    }

    method void startNewGame() {
        //TODO
        return;
    }

    method boolean isRunning() {
        return running;
    }

    method void handleInput() {
        var char key;

        let key = Keyboard.keyPressed();

        if (~(key = 0)) {
            if (~((key = Direction.U()) | (key = Direction.D()) | (key = Direction.L()) | (key = Direction.R()) | (key = 32) | (key = 140))) {
                return;
            }

            if ((key = Direction.U()) | (key = Direction.D()) | (key = Direction.L()) | (key = Direction.R())) {
                do tryMovePlayer(key);
            }
            if (key = 32) {
                // handle space key
                //TODO...
            }
            if (key = 140) {
                // handle escape key
                let running = false;
            }
        }

        return;
    }

    method void tryMovePlayer(Direction aDirection) {
        var Player player;
        var int currentX, currentY, targetX, targetY, nextX, nextY;

        let player = model.getPlayer();
        let currentX = player.getX();
        let currentY = player.getY();
        let targetX = currentX;
        let targetY = currentY;
        let nextX = targetX;
        let nextY = targetY;

        if (aDirection = Direction.U()) {
            let targetY = targetY - 1;
            let nextY = nextY - 2;
            if (targetY < 2) {
                let targetY = 2;
            }
        }
        if (aDirection = Direction.D()) {
            let targetY = targetY + 1;
            let nextY = nextY + 2;
            if (targetY > 13) {
                let targetY = 13;
            }
        }
        if (aDirection = Direction.L()) {
            let targetX = targetX - 1;
            let nextX = nextX - 2;
            if (targetX < 2) {
                let targetX = 2;
            }
        }
        if (aDirection = Direction.R()) {
            let targetX = targetX + 1;
            let nextX = nextX + 2;
            if (targetX > 29) {
                let targetX = 29;
            }
        }

        //TODO: collision handling logic!

        do player.moveTo(targetX, targetY);

        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}
