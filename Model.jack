class Model {
    field LevelManager levelManager;
    field Board board;
    field State state;
    field int tickAccumulator;

    constructor Model new() {
        let levelManager = LevelManager.new();
        let state = State.StatePlaying();
        let tickAccumulator = 0;
        return this;
    }

    method void update() {
        let tickAccumulator = tickAccumulator + 1;
        if (tickAccumulator > 20) {
            let tickAccumulator = 0;
        }
        return;
    }

    method LevelManager getLevelManager() {
        return levelManager;
    }

    method Board getBoard() {
        return board;
    }

    method State getState() {
        return state;
    }

    method int getTickAccumulator() {
        return tickAccumulator;
    }

    method void setBoard(Board aBoard) {
        let board = aBoard;
        return;
    }

    method void setState(State aState) {
        let state = aState;
        return;
    }

    method void dispose() {
        do levelManager.dispose();
        do board.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
